<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <script>
        window.$ = window.jQuery = require("../modules/jquery-3.2.1.min.js");
        require("../modules/titlebar.js");
        var settings = require("../conf/settings.json");
        var locale = require("../locales/" + settings["locale"] + ".json")["dashboard.htm"];
        </script>
        <script>document.title = "gKréta - " + locale["dashboard"]</script>
        <link rel="stylesheet" type="text/css" href="../css/general-dark.css" />
    </head>
    <body>
        <div id="title-bar-bg">
            <div id="title-bar">
                <div id="title"><script>document.write(document.title)</script></div>
                <div id="title-bar-btns">
                        <button id="min-btn" class="title-bar-btn"><img style="filter: invert(50%);" src="https://img.icons8.com/ios/24/000000/minimize-window.png"></button>
                        <button id="max-btn" class="title-bar-btn"><img style="filter: invert(50%);" src="https://img.icons8.com/ios/24/000000/maximize-window.png"></button>
                        <button id="close-btn" class="title-bar-btn"><img style="filter: invert(50%);" src="https://img.icons8.com/small/24/000000/close-window.png"></button>
                </div>
            </div>
        </div>
        <div id="mySidenav" class="sidenav">
                <a onclick="onNavClick('Dashboard')"><script>document.write(locale["dashboard"])</script></a>
                <a onclick="onNavClick('Evaluations')"><script>document.write(locale["evals"])</script></a>
                <a onclick="onNavClick('Timetable')"><script>document.write(locale["timetable"])</script></a>
                <a onclick="onNavClick('Absences')"><script>document.write(locale["absences"])</script></a>
                <a onclick="onNavClick('Settings')"><script>document.write(locale["settings"])</script></a>
        </div>
        <div id="content">  
            <script>
                var ipc = require("electron").ipcRenderer;

                var isErrorPage = false;
                var loading = true;

                var studentData = "";
                var timetableData = "";

                var currentTab = "Dashboard";

                var intervalID = "";

                ipc.send('getStudentDataAndSendToRendererFirst');
                ipc.on("gotStudentDataFirst", function studentDataHandler(event,studentDataL) {
                    studentData = studentDataL;
                    timetableData = timetableDataL;
                    refreshData();
                    intervalID = setInterval(refreshData, 300000);
                    loading = false;
                });

                ipc.on("gotStudentData", function studentDataHandler(event,studentDataL, timetableDataL) {
                    studentData = studentDataL;
                    timetableData = timetableDataL;
                    $('#content').empty();
                    var h1Name = $("<h1 style='margin-top: 30px;'>" + studentData.Name + "<h1/>");
                    var hr = $("<hr />")
                    var tabDiv = $("<div id='tabDiv' />")
                    h1Name.appendTo('#content');
                    hr.appendTo('#content');
                    tabDiv.appendTo('#content');
                    displayTab(currentTab);
                    loading = false;
                });


                ipc.on("gotError", function errorDataHandler(event, errorCode) {
                    displayErrorTab(errorCode); 
                });

                function refreshData() {
                    ipc.send('getStudentDataAndSendToRenderer');
                }

                function capitalizeFirstLetter(string) {
                    return string.charAt(0).toUpperCase() + string.slice(1);
                }
               
                function onNavClick(tab) {
                    if (!loading) {
                        var tabLocalized = "";
                        switch(tab) {
                            case "Dashboard": {
                                tabLocalized = locale["dashboard"];
                                break;
                            }
                            case "Evaluations": {
                                tabLocalized = locale["evals"];
                                break;
                            }
                            case "Timetable": {
                                tabLocalized = locale["timetable"];
                                break;
                            }
                            case "Absences": {
                                tabLocalized = locale["absences"];
                                break;
                            }
                            case "Settings": {
                                tabLocalized = locale["settings"];
                                break;
                            }
                        }

                        document.title = "gKréta - " + tabLocalized;
                        $('#title').empty();
                        $('#title').html(document.title);

                        if (!isErrorPage) {
                            displayTab(tab);
                        }
                    }
                }

                function getMonday(d) {
                    d = new Date(d);
                    var day = d.getDay(),
                        diff = d.getDate() - day + (day == 0 ? -6:1); // adjust when day is sunday
                    return new Date(d.setDate(diff));
                }

                function addDays(date, days) {
                    var result = new Date(date);
                    result.setDate(result.getDate() + days);
                    return result;
                }

                function generateDiv(divName, other_args) {
                    switch (divName) {
                        case "nextLesson": {
                            //TODO
                        }
                        case "evals": {
                            var evalDiv = $("<div style='display: inline-block;border-width: 2px;border-style: solid;border-color: #555;' id='evalDiv' />");
                            evalDiv.appendTo("#tabDiv");
                            var evalH3 = $("<h3>" + locale["evals"] + "</h3>");
                            evalH3.appendTo("#evalDiv");
                            var allEvalsP = $("<p>" + locale["total_number_of"] + " " + other_args[0] + " " + locale["evaluations"] +".</p>");
                            allEvalsP.appendTo("#evalDiv");
                            var evals5P = $("<p style='color: #03a338;'>" + locale["from_this"] + " " + other_args[5] + " " + locale["evals_are"] + " 5,</p>");
                            evals5P.appendTo("#evalDiv");
                            var evals4P = $("<p style='color: #bed300;'>" + other_args[4] + " " + locale["evals_are"] + " 4,</p>");
                            evals4P.appendTo("#evalDiv");
                            var evals3P = $("<p style='color: #ed5300;'>" + other_args[3] + " " + locale["evals_are"] + " 3,</p>");
                            evals3P.appendTo("#evalDiv");
                            var evals2P = $("<p style='color: #ff0202;'>" + other_args[2] + " " + locale["evals_are"] + " 2,</p>");
                            evals2P.appendTo("#evalDiv");
                            var evals1P = $("<p style='color: #820000;'>" + locale["and"] + " " + other_args[1] + " " + locale["evals_are"] + " 1.</p>");
                            evals1P.appendTo("#evalDiv");
                            var evalsTextP = $("<p>" + other_args[6] + " " + locale["text_evals_info"] + "</p>");
                            evalsTextP.appendTo("#evalDiv");
                            break;
                        }
                        case "absences": {
                            var absDiv = $("<div style='display: inline-block;float: right;border-width: 2px;border-style: solid;border-color: #555;' id='absDiv' />");
                            absDiv.appendTo("#tabDiv");
                            var absH3 = $("<h3>Absences</h3>");
                            absH3.appendTo("#absDiv");
                            var allAbsP = $("<p>" + locale["total_number_of"] + " " + other_args[0] + " " + locale["lowercase_abs"] + ".</p>");  
                            allAbsP.appendTo("#absDiv");
                            var justifiedAbsP = $("<p style='color: #03a338;'>" + locale["from_this"] + " " + other_args[1] + " " + locale["w_justified"] + ",</p>");
                            justifiedAbsP.appendTo("#absDiv");
                            var beJustifiedAbsP = $("<p style='color: #ff0202;'>" + locale["but"] + " " + other_args[2] + " " + locale["need_justify"] +".</p>");
                            beJustifiedAbsP.appendTo("#absDiv");
                            var medicalAbsP = $("<p style='color: #0290c9;'>" + locale["you_have"] + " " + other_args[3] + " " + locale["justified_by_doctor"] +".</p>");
                            medicalAbsP.appendTo("#absDiv");
                            break;
                        }
                        case "timetable": {
                            var timetableTable = $("<table id='timetableTable' style='width: 100%;'><tr><th>" + locale["count"] + "</th><th><span id='monday'>" + locale["monday"] + "</span></th><th><span id='tuesday'>" + locale["tuesday"] + "</th><th><span id='wednesday'>" + locale["wednesday"] + "</span></th><th><span id='thursday'>" + locale["thursday"] + "</span></th><th><span id='friday'>" + locale["friday"] + "</span></th><th><span id='saturday'>" + locale["saturday"] + "</span></th><th><span id='sunday'>" + locale["sunday"] + "</span></th></tr></table>");
                            timetableTable.appendTo("#tabDiv");

                            var lessonRows = new Array();

                            var daysAndLessons = new Array(new Array(),new Array(),new Array(),new Array(),new Array(),new Array(),new Array());
                            var daysOffset = 0;
                            var currentMonday = getMonday(new Date());
                            for (i = 0; i < 7;i++) {
                                var currentDay = addDays(currentMonday, daysOffset)
                                for (j = 0; j < Object.keys(timetableData).length;j++) {
                                    var currentLessonDate = timetableData[j].Date.substring(0, timetableData[j].Date.indexOf('T'))
                                    if (currentDay.getDate() === new Date(currentLessonDate).getDate()) {
                                        daysAndLessons[i][timetableData[j].Count] = timetableData[j].Subject;
                                    }
                                }
                                daysOffset++;
                            }

                            var currentDay = new Date().getDay();
                            switch (currentDay) {
                                case 0: {
                                    $("#sunday").css("color", "#ff0202");
                                    break;
                                }
                                case 1: {
                                    $("#monday").css("color", "#ff0202");
                                    break;
                                }
                                case 2: {
                                    $("#tuesday").css("color", "#ff0202");
                                    break;
                                }
                                case 3: {
                                    $("#wednesday").css("color", "#ff0202");
                                    break;
                                }
                                case 4: {
                                    $("#thursday").css("color", "#ff0202");
                                    break;
                                }
                                case 5: {
                                    $("#friday").css("color", "#ff0202");
                                    break;
                                }
                                case 6: {
                                    $("#saturday").css("color", "#ff0202");
                                    break;
                                }
                            }

                            for (i = 0; i < 10;i++) {
                                lessonRows[i] = $("<tr id='rowTr" + i + "'></tr>");
                                lessonRows[i].appendTo("#timetableTable");
                                $("<td>" + (i + 1) + ".</td>").appendTo("#rowTr" + i);

                                for (j = 0; j < 7; j++) {
                                    var currentLesson = daysAndLessons[j][i+1];
                                    if (currentLesson === undefined)
                                        $("<td> --- </td>").appendTo("#rowTr" + i);
                                    else
                                        $("<td>" + currentLesson + "</td>").appendTo("#rowTr" + i);
                                }
                            }
                        }
                        break;
                    }
                }

                function displayErrorTab(errorCode) {
                    $('body').empty();
                    var h1Name = $("<h1 style='margin-top: 30px; color: #a30404;'>Error " + errorCode + "<h1/>");
                    var hr = $("<hr />")
                    var tabDiv = $("<div id='tabDiv' />")
                    var errorDescH2 = $("<h2>" + locale["error_faq_title"] + "<h2/>");
                    switch (errorCode) {
                        case 403: {
                            var errorDesc = $("<p>" + locale["error_faq_403"] + "<p/>");
                            break;
                        }

                        case 503: {
                            var errorDesc = $("<p>" + locale["error_faq_503"] + "<p/>");
                            break;
                        }

                        default: {
                            var errorDesc = $("<p>" + locale["error_faq_unk"] + "<p/>");
                            break;
                        }
                    }
                    h1Name.appendTo('#content');
                    hr.appendTo('#content');
                    tabDiv.appendTo('#content');
                    errorDescH2.appendTo('#tabDiv');
                    errorDesc.appendTo('#tabDiv');
                    isErrorPage = true;
                }

                function saveSettings() {
                    var settingsJson = {
                        "locale" : $("#sLocale").val()
                    }
                    ipc.send("saveSettings", settingsJson);
                };

                function openExternalLink(link) {
                    ipc.send("openExternalLink", link);
                }

                function displayTab(tab) {
                    currentTab = tab;
                    switch(tab) {
                        case "Dashboard": {
                            $("#tabDiv").empty();
                            $("#tabDiv").html("<h2>" + locale["dashboard"] + "</h2>");

                            var allEvals = 0;
                            var evals5 = 0;
                            var evals4 = 0;
                            var evals3 = 0;
                            var evals2 = 0;
                            var evals1 = 0;
                            var evalsText = 0;
                            
                            for(let i = 0; i < Object.keys(studentData.Evaluations).length; i++) {
                                switch (studentData.Evaluations[i].NumberValue) {
                                    case 5: {
                                        evals5++;
                                        break;
                                    }
                                    case 4: {
                                        evals4++;
                                        break;
                                    }
                                    case 3: {
                                        evals3++;
                                        break;
                                    }
                                    case 2: {
                                        evals2++;
                                        break;
                                    }
                                    case 1: {
                                        evals1++;
                                        break;
                                    }
                                    default: {
                                        evalsText++;
                                        break;
                                    }
                                }
                                allEvals++;
                            }

                            var allAbsences = 0;
                            var justifiedAbsences = 0;
                            var beJustifiedAbsences = 0;
                            var medicalAbsences = 0;
                            for (i = 0; i < Object.keys(studentData.Absences).length; i++) {
                                if (studentData.Absences[i].JustificationState === "Justified")
                                {
                                    justifiedAbsences++;
                                } else if (studentData.Absences[i].JustificationState === "BeJustified") {
                                    beJustifiedAbsences++;
                                }
                                if (studentData.Absences[i].JustificationType === "Medical")
                                    medicalAbsences++;
                                allAbsences++;
                            }

                            var evalsDivArray = new Array();
                            evalsDivArray[0] = allEvals;
                            evalsDivArray[5] = evals5;
                            evalsDivArray[4] = evals4;
                            evalsDivArray[3] = evals3;
                            evalsDivArray[2] = evals2;
                            evalsDivArray[1] = evals1;
                            evalsDivArray[6] = evalsText;

                            var absDivArray = new Array();
                            absDivArray[0] = allAbsences;
                            absDivArray[1] = justifiedAbsences;
                            absDivArray[2] = beJustifiedAbsences;
                            absDivArray[3] = medicalAbsences;

                            generateDiv("evals", evalsDivArray);
                            generateDiv("absences", absDivArray);
                            break;
                        }
                        
                        case "Evaluations": {
                            $("#tabDiv").empty();
                            $("#tabDiv").html("<h2>" + locale["evals"] + "</h2>");
                            var evals = studentData.Evaluations;   
                            var subjects = new Array();

                            for(let i = 0; i < Object.keys(evals).length; i++) {
                                var currentSub = evals[i].Subject;
                                if (subjects.indexOf(currentSub) === -1 && currentSub !== null) {
                                    subjects.push(currentSub);
                                }
                            }

                            for (j = 0;j < Object.keys(subjects).length;j++) {
                                $("<h2 id='h2" + j + "'><b>" + capitalizeFirstLetter(subjects[j]) + "</b></h2>").appendTo("#tabDiv");
                                for (i = 0;i < Object.keys(evals).length;i++) {
                                    if (evals[i].Subject === subjects[j]) {
                                        switch (evals[i].NumberValue) {
                                            case 5: {
                                                var evalColor = "#03a338";
                                                break;
                                            }
                                            case 4: {
                                                var evalColor = "#bed300";
                                                break;
                                            }
                                            case 3: {
                                                var evalColor = "#ed5300";
                                                break;
                                            }
                                            case 2: {
                                                var evalColor = "#ff0202";
                                                break;
                                            }
                                            case 1: {
                                                var evalColor = "#820000";
                                                break;
                                            }
                                            default: {
                                                var evalColor = "#820000";
                                                break;
                                            }
                                        }

                                        var currentEval = "<p><span id='spanEval" + i + "' style='color: " + evalColor + ";'>" + evals[i].Value + "</span>"; 
                                        
                                        if (evals[i].Type === "MidYear") {
                                            if (evals[i].Mode !== "" && evals[i].Mode !== null)
                                                currentEval += " | " + evals[i].Mode;

                                            if (evals[i].Theme !== "" && evals[i].Theme !== null)
                                                currentEval += " | " + evals[i].Theme;

                                            if (evals[i].Weight !== "" && evals[i].Weight !== null && evals[i].Weight !== "100%") {
                                                if (evals[i].Weight === "200%")
                                                    currentEval += " | <span style='color: #ff0202;'>" + evals[i].Weight + "</span>";
                                                else 
                                                    currentEval += " | <span style='color: #0290c9;'>" + evals[i].Weight + "</span>";
                                            }
                                    
                                            currentEval = $(currentEval + "</p>");
                                            currentEval.appendTo("#tabDiv");
                                        } else if (evals[i].Type === "HalfYear") {
                                            if (evals[i].TypeName !== "" && evals[i].TypeName !== null)
                                                currentEval += " | " + evals[i].TypeName;

                                            currentEval = $(currentEval + "</p>");
                                            currentEval.appendTo("#tabDiv");
                                        }
                                    }
                                }
                            }
                            break;
                        }

                        case "Timetable": {
                            $("#tabDiv").empty();
                            $("#tabDiv").html("<h2>" + locale["timetable"] + "</h2>");
                            generateDiv("timetable");
                            break;
                        }

                        case "Absences": {
                            $("#tabDiv").empty();
                            $("#tabDiv").html("<h2>" + locale["absences"] + "</h2>");
                            var absences = studentData.Absences;   
                            var dates = new Array();

                            for(let i = 0; i < Object.keys(absences).length; i++) {
                                var currentDate = absences[i].LessonStartTime.substring(0, absences[i].LessonStartTime.indexOf('T'));
                                if (dates.indexOf(currentDate) === -1 && currentDate !== null) {
                                    dates.push(currentDate);
                                }
                            }

                            dates.sort(function(a, b) {
                                a = new Date(a);
                                b = new Date(b);
                                return a>b ? -1 : a<b ? 1 : 0;
                            });

                            for (j = 0;j < Object.keys(dates).length;j++) {
                                $("<h2 id='h2" + j + "'><b>" + dates[j] + "</b></h2>").appendTo("#tabDiv");
                                for (i = 0;i < Object.keys(absences).length;i++) {
                                    if (absences[i].LessonStartTime.substring(0, absences[i].LessonStartTime.indexOf('T')) === dates[j]) {
                                        switch (absences[i].JustificationState) {
                                            case "BeJustified": {
                                                var absenceColor = "#ff0202";
                                                break;
                                            }
                                            case "Justified": {
                                                var absenceColor = "#03a338";
                                                break;
                                            }
                                            default: {
                                                var absenceColor = "#ff0202";
                                                break;
                                            }
                                        }
                                        var currentAbsence = $("<p style='color: " + absenceColor +" ;'>" + absences[i].TypeName + " | " + absences[i].ModeName + " | " + absences[i].Subject + " (" + absences[i].JustificationStateName +")</p>");
                                        currentAbsence.appendTo("#tabDiv"); 
                                    } 
                                }
                            }                          
                            break;
                        }

                        case "Settings": {
                            $("#tabDiv").empty();
                            $("#tabDiv").html("<h2>" + locale["settings"] + "</h2>");

                            var languageSelected = new Array();
                            switch (settings["locale"]) {
                                case "en": {
                                    languageSelected[0] = " selected ";
                                    languageSelected[1] = "";
                                    break;
                                }
                                case "hu": {
                                    languageSelected[0] = "";
                                    languageSelected[1] = " selected ";
                                    break;
                                }
                            }

                            var pLocale = $("<p>" + locale["language"] + ": </p>");
                            pLocale.appendTo("#tabDiv");
                            var sLocale = $('<select id="sLocale"/>');
                            sLocale.appendTo("#tabDiv");
                            var sLocaleEn = $('<option value="en"' + languageSelected[0] + '>' + locale["en"] + '</option>');
                            sLocaleEn.appendTo("#sLocale");
                            var sLocaleHu = $('<option value="hu"' + languageSelected[1] + '>' + locale["hu"] + '</option>');
                            sLocaleHu.appendTo("#sLocale");

                            $("<br />").appendTo("#tabDiv");

                            var bSaveSettings = $("<input type='button' onclick='saveSettings()' value='" + locale["save_settings"] +"' />");
                            bSaveSettings.appendTo("#tabDiv");

                            var linkToIcons8 = $("<br /><br /><a style='color: #555;' href='#' onclick='openExternalLink(\"https://icons8.com\")'>Icons by Icons8</a>");
                            linkToIcons8.appendTo("#tabDiv");
                            break;
                        }

                        default: {
                            break;
                        }
                    }
                }
            </script>
        </div>
    </body>
</html>