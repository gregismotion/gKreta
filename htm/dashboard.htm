<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <script>
        var settings = "";
        var locale = "";
        var dateUtils = "";

        var ipc = require("electron").ipcRenderer;
        ipc.send("getSettings");
        ipc.once("getSettingsSuccess", (event, data) => {
            settings = data;
            if (settings === null || settings === undefined || settings === "") {
                settings = "en";
            }
            locale = require("../locales/" + settings["locale"] + ".json")["dashboard.htm"];

            document.title = "gKréta - " + locale["dashboard"];
        });

        </script>
        <link rel="stylesheet" type="text/css" href="../css/general-dark.css" />
    </head>
    <body>
        <script> require("../modules/titlebar.js");</script>
        <div id="title-bar-bg">
            <div id="title-bar">
                <div id="title"><script>document.write(document.title)</script></div>
                <div id="title-bar-btns">
                        <button id="min-btn" class="title-bar-btn"><img style="filter: invert(50%);" src="https://img.icons8.com/ios/24/000000/minimize-window.png"></button>
                        <button id="max-btn" class="title-bar-btn"><img style="filter: invert(50%);" src="https://img.icons8.com/ios/24/000000/maximize-window.png"></button>
                        <button id="close-btn" class="title-bar-btn"><img style="filter: invert(50%);" src="https://img.icons8.com/small/24/000000/close-window.png"></button>
                </div>
            </div>
        </div>
        <div id="mySidenav" class="sidenav">
                <a onclick="onNavClick('Dashboard')"><script>document.write(locale["dashboard"])</script></a>
                <a onclick="onNavClick('Evaluations')"><script>document.write(locale["evals"])</script></a>
                <a onclick="onNavClick('Timetable')"><script>document.write(locale["timetable"])</script></a>
                <a onclick="onNavClick('Absences')"><script>document.write(locale["absences"])</script></a>
                <a onclick="onNavClick('Notes')"><script>document.write(locale["notes"])</script></a>
                <a onclick="onNavClick('Export')"><script>document.write(locale["export"])</script></a>
                <a onclick="onNavClick('Settings')"><script>document.write(locale["settings"])</script></a>
        </div>
        <div id="loadingDiv" style=" position: absolute;left: 50%;top:25%;transform: translateX(-50%);"><img src="../img/banner980150.png" /><img src="../img/loading.svg" style="  position: absolute;left: 50%;top:200%;transform: translateX(-50%);"/></div>
        <div id="content" style="background-color:#1c1c1c;display: none;">
            <script>
                window.$ = window.jQuery = require("../modules/jquery-3.2.1.min.js");
                var isErrorPage = false;
                var loading = true;
                var studentData = "";
                var timetableData = "";
                var currentTab = "Dashboard";
                var intervalID = "";
                ipc.send("isGetStudentDataRunning");

                ipc.on("isGetStudentDataRunning", (event, isGetStudentDataRunning) => {
                    if (isGetStudentDataRunning) {
                        setTimeout(() => {ipc.send("isGetStudentDataRunning")}, 5000);
                    } else {
                        intervalID = setInterval(() => {ipc.send('getStudentData')}, 300000);
                        ipc.send('getStudentData');
                    }
                });

                ipc.on("getStudentDataSuccess", function studentDataHandler(event,studentDataL,timetableDataL) {
                    studentData = studentDataL;
                    timetableData = timetableDataL;
                    setupFirstWindow();
                });

                ipc.on("getStudentDataError", function errorDataHandler(event, errorCode) {
                    displayErrorTab(errorCode);
                });

                function setupFirstWindow() {
                    var h1Name = $("<h1 style='margin-top: 30px; -webkit-user-select:none;'>" + studentData.Name + "<h1/>");
                    var hr = $("<hr />")
                    var tabDiv = $("<div id='tabDiv' />")
                    h1Name.appendTo('#content');
                    hr.appendTo('#content');
                    tabDiv.appendTo('#content');
                    displayTab(currentTab);
                    $("#content").fadeIn(500, () => {
                        $("#loadingDiv").remove();
                    });
                    dateUtils = require("../modules/date-utils.js");
                    loading = false;
                }

                function capitalizeFirstLetter(string) {
                    return string.charAt(0).toUpperCase() + string.slice(1);
                }

                function onNavClick(tab) {
                    if (!loading) {
                        const getLocalizedTab =  tab => {
                            const tabNames =  {
                                Dashboard: () => locale["dashboard"],
                                Evaluations:  () => locale["evals"],
                                Timetable: () => locale["timetable"],
                                Absences: () => locale["absences"],
                                Notes: () => locale["notes"],
                                Export: () => locale["export"],
                                Settings:  () => locale["settings"],
                                default: () => ""
                            };

                            return (tabNames[tab] || tabNames.default)();
                        };
                        var  tabLocalized = getLocalizedTab(tab);
                        document.title = "gKréta - " + tabLocalized;

                        $('#title').empty();
                        $('#title').html(document.title);

                        if (!isErrorPage) {
                            displayTab(tab);
                        }
                    }
                }

                function generateDiv(divName, other_args) {
                    const generateNewDiv = () => {
                        const divs = {
                            evals: () => {
                                var evalDiv = $("<div style='display: inline-block; vertical-align: top;;margin: 10px;border-width: 2px;border-style: solid;border-color: #555;' id='evalDiv' />");
                                evalDiv.appendTo("#tabDiv");
                                var evalH3 = $("<h3>" + locale["evals"] + "</h3>");
                                evalH3.appendTo("#evalDiv");
                                var allEvalsP = $("<p>" + locale["total_number_of"] + " " + other_args[0] + " " + locale["evaluations"] +".</p>");
                                allEvalsP.appendTo("#evalDiv");
                                var evals5P = $("<p style='color: #03a338;'>" + locale["from_this"] + " " + other_args[5] + " " + locale["evals_are"] + " 5,</p>");
                                evals5P.appendTo("#evalDiv");
                                var evals4P = $("<p style='color: #bed300;'>" + other_args[4] + " " + locale["evals_are"] + " 4,</p>");
                                evals4P.appendTo("#evalDiv");
                                var evals3P = $("<p style='color: #ed5300;'>" + other_args[3] + " " + locale["evals_are"] + " 3,</p>");
                                evals3P.appendTo("#evalDiv");
                                var evals2P = $("<p style='color: #ff0202;'>" + other_args[2] + " " + locale["evals_are"] + " 2,</p>");
                                evals2P.appendTo("#evalDiv");
                                var evals1P = $("<p style='color: #820000;'>" + locale["and"] + " " + other_args[1] + " " + locale["evals_are"] + " 1.</p>");
                                evals1P.appendTo("#evalDiv");
                                var evalsTextP = $("<p>" + other_args[6] + " " + locale["text_evals_info"] + "</p>");
                                evalsTextP.appendTo("#evalDiv");
                            },
                            halfyear: () => {
                                var halfyearDiv = $("<div style='display: inline-block; margin: 10px; vertical-align: top; border-width: 2px;border-style: solid;border-color: #555;' id='halfyearDiv' />");
                                halfyearDiv.appendTo("#tabDiv");
                                var halfyearH3 = $("<h3>" + locale["current_avgs"] + "</h3>");
                                halfyearH3.appendTo("#halfyearDiv");
                                var evalCount = 0;
                                for (i = 0; i < Object.keys(other_args).length; i++) {
                                    if (other_args[i].Value !== 0) {
                                        if (other_args[i].Value === 5) {
                                            currentHalfYearEvalColor = "#03a338";
                                        } else if (other_args[i].Value < 5 || other_args[i].Value >= 4.5) {
                                            currentHalfYearEvalColor = "#a1ff5e";
                                        } else if (other_args[i].Value < 4.5 || other_args[i].Value >= 3.5) {
                                            currentHalfYearEvalColor = "#bed300";
                                        } else if (other_args[i].Value < 3.5 || other_args[i].Value >= 2.5) {
                                            currentHalfYearEvalColor = "#ed5300";
                                        } else if (other_args[i].Value < 2.5 || other_args[i].Value >= 1.5) {
                                            currentHalfYearEvalColor = "#ff0202";
                                        } else if (other_args[i].Value < 1.5 || other_args[i].Value >= 2.5) {
                                            currentHalfYearEvalColor = "#820000";
                                        } else {
                                            currentHalfYearEvalColor = "#820000";
                                        }

                                        var currentHalfYearEval = $("<p>" + other_args[i].Subject + ": <span style='color: " + currentHalfYearEvalColor + ";'> " + other_args[i].Value + "</span></p>");
                                        currentHalfYearEval.appendTo("#halfyearDiv");
                                        evalCount++;
                                    }
                                }
                            },
                            absences: () => {
                                var absDiv = $("<div style='display: inline-block;margin: 10px; vertical-align: top;border-width: 2px;border-style: solid;border-color: #555;' id='absDiv' />");
                                absDiv.appendTo("#tabDiv");
                                var absH3 = $("<h3>" + locale["absences"] + "</h3>");
                                absH3.appendTo("#absDiv");
                                var allAbsP = $("<p>" + locale["total_number_of"] + " " + other_args[0] + " " + locale["lowercase_abs"] + ".</p>");
                                allAbsP.appendTo("#absDiv");
                                var justifiedAbsP = $("<p style='color: #03a338;'>" + locale["from_this"] + " " + other_args[1] + " " + locale["w_justified"] + ",</p>");
                                justifiedAbsP.appendTo("#absDiv");
                                var beJustifiedAbsP = $("<p style='color: #ff0202;'>" + locale["but"] + " " + other_args[2] + " " + locale["need_justify"] +".</p>");
                                beJustifiedAbsP.appendTo("#absDiv");
                                var medicalAbsP = $("<p style='color: #0290c9;'>" + locale["you_have"] + " " + other_args[3] + " " + locale["justified_by_doctor"] +".</p>");
                                medicalAbsP.appendTo("#absDiv");
                            },
                            timetable: () => {
                                var timetableTable = $("<table id='timetableTable' style='width: 100%;'><tr><th>" + locale["count"] + "</th><th><span id='monday'>" + locale["monday"] + "</span></th><th><span id='tuesday'>" + locale["tuesday"] + "</th><th><span id='wednesday'>" + locale["wednesday"] + "</span></th><th><span id='thursday'>" + locale["thursday"] + "</span></th><th><span id='friday'>" + locale["friday"] + "</span></th><th><span id='saturday'>" + locale["saturday"] + "</span></th><th><span id='sunday'>" + locale["sunday"] + "</span></th></tr></table>");
                                timetableTable.appendTo("#tabDiv");

                                var lessonRows = new Array();

                                var daysAndLessons = new Array(new Array(),new Array(),new Array(),new Array(),new Array(),new Array(),new Array());
                                var daysOffset = 0;
                                var currentMonday = dateUtils.getMonday(new Date());
                                for (i = 0; i < 7;i++) {
                                    var currentDay = dateUtils.addDays(currentMonday, daysOffset)
                                    for (j = 0; j < Object.keys(timetableData).length;j++) {
                                        var currentLessonDate = timetableData[j].Date.substring(0, timetableData[j].Date.indexOf('T'))
                                        if (currentDay.getDate() === new Date(currentLessonDate).getDate()) {
                                            daysAndLessons[i][timetableData[j].Count] = timetableData[j].Subject;
                                        }
                                    }
                                    daysOffset++;
                                }
                                const colorCurrentDay = currentDay => {
                                    const days = {
                                        0: () => $("#sunday").css("color", "#ff0202"),
                                        1: () => $("#monday").css("color", "#ff0202"),
                                        2: () => $("#tuesday").css("color", "#ff0202"),
                                        3: () => $("#wednesday").css("color", "#ff0202"),
                                        4: () => $("#thursday").css("color", "#ff0202"),
                                        5: () => $("#friday").css("color", "#ff0202"),
                                        6: () => $("#saturday").css("color", "#ff0202")
                                    };
                                    days[currentDay]();
                                }
                                colorCurrentDay(new Date().getDay());
                                for (i = 0; i < 10;i++) {
                                    lessonRows[i] = $("<tr id='rowTr" + i + "'></tr>");
                                    lessonRows[i].appendTo("#timetableTable");
                                    $("<td>" + (i + 1) + ".</td>").appendTo("#rowTr" + i);

                                    for (j = 0; j < 7; j++) {
                                        var currentLesson = daysAndLessons[j][i+1];
                                        if (currentLesson === undefined)
                                            $("<td> --- </td>").appendTo("#rowTr" + i);
                                        else
                                            $("<td>" + currentLesson + "</td>").appendTo("#rowTr" + i);
                                    }
                                }
                            }
                        };
                        divs[divName]();
                    };
                    generateNewDiv();
                }

                function displayErrorTab(errorCode) {
                    $('body').empty();
                    var h1Name = $("<h1 style='margin-top: 30px; color: #a30404;'>Error " + errorCode + "<h1/>");
                    var hr = $("<hr />")
                    var tabDiv = $("<div id='tabDiv' />")
                    var errorDescH2 = $("<h2>" + locale["error_faq_title"] + "<h2/>");
                    var errorDesc;
                    const writeErrorDesc = errorCode => {
                        const errors = {
                            403: () =>  errorDesc = $("<p>" + locale["error_faq_403"] + "<p/>"),
                            503: () =>  errorDesc = $("<p>" + locale["error_faq_503"] + "<p/>"),
                            default: () =>  errorDesc = $("<p>" + locale["error_faq_unk"] + "<p/>")
                        };
                        errors[errorCode]();
                    };
                    writeErrorDesc();
                    h1Name.appendTo('#content');
                    hr.appendTo('#content');
                    tabDiv.appendTo('#content');
                    errorDescH2.appendTo('#tabDiv');
                    errorDesc.appendTo('#tabDiv');
                    isErrorPage = true;
                }

                function saveSettings() {
                    var settingsJson = {
                        "locale" : $("#sLocale").val()
                    }
                    ipc.send("saveSettings", settingsJson);
                };

                function openExternalLink(link) {
                    ipc.send("openExternalLink", link);
                }

                function exportToFile() {
                    exportType = $("#sExportType").val();
                    exportFormat = $("#sExportFormat").val();
                    var exportData = "";
                    const exportHandler = (exportType, exportFormat) => {
                        const types = {
                            avgEvals: () => {
                                const formats = {
                                    html:  () => {
                                        var avgTable = $("<table id='timetableTable' style='width: 100%;'><th>" + locale["subject"] + "</th><th>" + locale["your_avg"] + "</th><th>" + locale["class_avg"] + "</th><th>" + locale["diff"] + "</th></tr></table>");
                                        var subjects = new Array();
                                        var subjectRow = new Array();
                                        for(let i = 0; i < Object.keys(studentData.SubjectAverages).length; i++) {
                                            var currentSub = studentData.SubjectAverages[i].Subject;
                                            if (subjects.indexOf(currentSub) === -1 && currentSub !== null) {
                                                subjects.push(currentSub);
                                            }
                                        }
                                        for (i = 0; i < Object.keys(subjects).length;i++) {
                                            subjectRow[i] = $("<tr id='rowTr" + i + "'></tr>");
                                            subjectRow[i].appendTo(avgTable);

                                            for (j = 0; j < 4; j++) {
                                                const getCurrentColumn = j => {
                                                    const columns = {
                                                        0: () => {var currentData = studentData.SubjectAverages[i].Subject;},
                                                        1: () => {var currentData = studentData.SubjectAverages[i].Value;},
                                                        2: () => {var currentData = studentData.SubjectAverages[i].ClassValue;},
                                                        3: () => {var currentData = studentData.SubjectAverages[i].Difference;},
                                                    };
                                                    (columns[j] || columns[0])();
                                                };
                                                getCurrentColumn(j);
                                                $("<td>" + currentData + "</td>").appendTo(subjectRow[i]);
                                            }
                                        }
                                        exportData = avgTable.html().replace("<tbody>", "<table style='width: 100%; height:100%'>");
                                        exportData = exportData.replace("</tbody>", "</table>");
                                    }
                                };
                                (formats[exportFormat] || formats[html])();
                            },
                            timetable: () => {
                                const formats = {
                                    html:  () => {
                                        var timetableTable = $("<table id='timetableTable' style='width: 100%;'><tr><th>" + locale["count"] + "</th><th><span id='monday'>" + locale["monday"] + "</span></th><th><span id='tuesday'>" + locale["tuesday"] + "</th><th><span id='wednesday'>" + locale["wednesday"] + "</span></th><th><span id='thursday'>" + locale["thursday"] + "</span></th><th><span id='friday'>" + locale["friday"] + "</span></th><th><span id='saturday'>" + locale["saturday"] + "</span></th><th><span id='sunday'>" + locale["sunday"] + "</span></th></tr></table>");
                                        var lessonRows = new Array();
                                        var daysAndLessons = new Array(new Array(),new Array(),new Array(),new Array(),new Array(),new Array(),new Array());
                                        var daysOffset = 0;
                                        var currentMonday = dateUtils.getMonday(new Date());
                                        for (i = 0; i < 7;i++) {
                                            var currentDay = dateUtils.addDays(currentMonday, daysOffset)
                                            for (j = 0; j < Object.keys(timetableData).length;j++) {
                                                var currentLessonDate = timetableData[j].Date.substring(0, timetableData[j].Date.indexOf('T'))
                                                if (currentDay.getDate() === new Date(currentLessonDate).getDate()) {
                                                    daysAndLessons[i][timetableData[j].Count] = timetableData[j].Subject;
                                                }
                                            }
                                            daysOffset++;
                                        }
                                        for (i = 0; i < 10;i++) {
                                            lessonRows[i] = $("<tr id='rowTr" + i + "'></tr>");
                                            lessonRows[i].appendTo(timetableTable);
                                            $("<td>" + (i + 1) + ".</td>").appendTo(lessonRows[i]);
                                            for (j = 0; j < 7; j++) {
                                                var currentLesson = daysAndLessons[j][i+1];
                                                if (currentLesson === undefined)
                                                    $("<td> --- </td>").appendTo(lessonRows[i]);
                                                else
                                                    $("<td>" + currentLesson + "</td>").appendTo(lessonRows[i]);
                                            }
                                        }
                                        exportData = timetableTable.html().replace("<tbody>", "<table style='width: 100%; height:100%'>");
                                        exportData = exportData.replace("</tbody>", "</table>");
                                    }
                                };
                                (formats[exportFormat] || formats[html])();
                            }
                        };
                        (types[exportType] || types[avgEvals])();
                    };
                    ipc.send("exportToFile", exportType, exportFormat, exportData);
                }

                function displayTab(tab) {
                    currentTab = tab;
                    tab = (tab ===  "Evaluations") ?  "evals" : tab;
                    $("#tabDiv").empty();
                    $("#tabDiv").html("<h2>" + locale[tab.toLowerCase()] + "</h2>");

                    const displayNewTab = tab => {
                        const tabs = {
                            Dashboard: () => {
                                var evalsDivArray = {
                                    6: 0,
                                    5: 0,
                                    4: 0,
                                    3: 0,
                                    2: 0,
                                    1: 0,
                                    0: 0
                                };
                                const incrementCorrectEvalCount =  (evalValue) => {
                                        const numbers = {
                                            default: () => evalsDivArray[6]++,
                                            5: () => evalsDivArray[5]++,
                                            4: () => evalsDivArray[4]++,
                                            3: () => evalsDivArray[3]++,
                                            2: () => evalsDivArray[2]++,
                                            1: () => evalsDivArray[1]++
                                        };
                                        (numbers[evalValue] || numbers.default)();
                                    };
                                for(let i = 0; i < Object.keys(studentData.Evaluations).length; i++) {
                                    incrementCorrectEvalCount(studentData.Evaluations[i].NumberValue);
                                }
                                evalsDivArray[0] =  evalsDivArray[1] + evalsDivArray[2]+ evalsDivArray[3]+ evalsDivArray[4]+ evalsDivArray[5]+ evalsDivArray[6];

                                var absenceDivArray = {
                                    0: 0,
                                    1: 0,
                                    2: 0,
                                    3: 0,
                                }
                                const incrementCorrectAbsenceCount =  (absenceType, absenceType2) => {
                                        const absenceTypes = {
                                            Justified: () => absenceDivArray[1]++,
                                            BeJustified: () => absenceDivArray[2]++
                                        };
                                        if (absenceType2 === "Medical")
                                            absenceDivArray[3]++;
                                        (absenceTypes [absenceType])();
                                    };
                                for (i = 0; i < Object.keys(studentData.Absences).length; i++) {
                                    incrementCorrectAbsenceCount(studentData.Absences[i].JustificationState, studentData.Absences[i].JustificationType);
                                }
                                absenceDivArray[0] = absenceDivArray[1] + absenceDivArray[2] + absenceDivArray[3];

                                generateDiv("halfyear", studentData.SubjectAverages);
                                generateDiv("evals", evalsDivArray);
                                generateDiv("absences", absenceDivArray);
                            },
                            evals: () => {
                                var evals = studentData.Evaluations;
                                var subjects = new Array();

                                for(let i = 0; i < Object.keys(evals).length; i++) {
                                    var currentSub = evals[i].Subject;
                                    if (subjects.indexOf(currentSub) === -1 && currentSub !== null) {
                                        subjects.push(currentSub);
                                    }
                                }
                                const evaluationHandler = (eval) => {
                                            const colors = {
                                                5: () => "#03a338",
                                                4: () => "#bed300",
                                                3: () => "#ed5300",
                                                2: () => "#ff0202",
                                                1: () => "#820000"
                                            };
                                            eval.Color = (colors[eval.NumberValue] || colors[1])();

                                            const forms = {
                                                Mark: () => {
                                                    const types = {
                                                        MidYear: () => {
                                                            if (eval.Mode !== "" && eval.Mode !== null)
                                                                currentEval += " | " + eval.Mode;
                                                            if (eval.Theme !== "" && evals.Theme !== null)
                                                                currentEval += " | " + eval.Theme;
                                                            if (eval.Weight !== "" && eval.Weight !== null && eval.Weight !== "100%") {
                                                                if (eval.Weight === "200%")
                                                                    currentEval += " | <span style='color: #ff0202;'>" + eval.Weight + "</span>";
                                                                else
                                                                    currentEval += " | <span style='color: #0290c9;'>" + eval.Weight + "</span>";
                                                            }
                                                            currentEval = $(currentEval + "</p>");
                                                            currentEval.appendTo("#tabDiv");
                                                        },
                                                        HalfYear: () => {
                                                            if (eval.TypeName !== "" && eval.TypeName !== null)
                                                                currentEval += " | " + eval.TypeName;
                                                            currentEval = $(currentEval + "</p>");
                                                            currentEval.appendTo("#tabDiv");
                                                        }
                                                    };
                                                    var currentEval = "<p><span id='spanEval" + i + "' style='color: " + eval.Color + ";'>" + eval.Value + "</span>";
                                                    (types[eval.Type] || types[MidYear])();        
                                                },
                                                Text: () => {
                                                    const types = {
                                                        MidYear: () => {
                                                            if (eval.FormName !== "" && eval.FormName !== null)
                                                                currentEval += " | " + eval.FormName;
                                                            if (eval.Mode !== "" && evals.Mode !== null)
                                                                currentEval += " | " + eval.Mode;
                                                            if (eval.Theme !== "" && eval.Theme !== null)
                                                                currentEval += " | " + eval.Theme;
                                                            currentEval = $(currentEval + "</p>");
                                                            currentEval.appendTo("#tabDiv");
                                                        },
                                                        HalfYear: () => {
                                                            if (eval.TypeName !== "" && eval.TypeName !== null)
                                                                currentEval += " | " + eval.TypeName;
                                                            currentEval = $(currentEval + "</p>");
                                                            currentEval.appendTo("#tabDiv");
                                                        }
                                                    };
                                                    var currentEval  = "<p>" + eval.Value;
                                                    (types[eval.Type] || types[MidYear])();     
                                                }
                                            };
                                            (forms[eval.Form] || forms[Mark])();
                                        };
                                for (j = 0;j < Object.keys(subjects).length;j++) {
                                    $("<h2 id='h2" + j + "'><b>" + capitalizeFirstLetter(subjects[j]) + "</b></h2>").appendTo("#tabDiv");
                                    for (i = 0;i < Object.keys(evals).length;i++) {
                                        if (evals[i].Subject === subjects[j]) 
                                            evaluationHandler(evals[i]);
                                    }
                                }
                            },
                            Timetable: () => {
                                generateDiv("timetable");
                            },
                            Absences: () => {
                                var absences = studentData.Absences;
                                var dates = new Array();

                                for(let i = 0; i < Object.keys(absences).length; i++) {
                                    var currentDate = absences[i].LessonStartTime.substring(0, absences[i].LessonStartTime.indexOf('T'));
                                    if (dates.indexOf(currentDate) === -1 && currentDate !== null) {
                                        dates.push(currentDate);
                                    }
                                }
                                dates.sort(function(a, b) {
                                    a = new Date(a);
                                    b = new Date(b);
                                    return a>b ? -1 : a<b ? 1 : 0;
                                });
                                for (j = 0;j < Object.keys(dates).length;j++) {
                                    $("<h2 id='h2" + j + "'><b>" + dates[j] + "</b></h2>").appendTo("#tabDiv");
                                    for (i = 0;i < Object.keys(absences).length;i++) {
                                        if (absences[i].LessonStartTime.substring(0, absences[i].LessonStartTime.indexOf('T')) === dates[j]) {
                                            const getAbsenceColor = justificationState=> {
                                                const colors = {
                                                    BeJustified: () => "#ff0202",
                                                    Justified: () => "#03a338",
                                                };
                                                return (colors[justificationState] || colors.BeJustified)();
                                            };
                                            var currentAbsence = $("<p style='color: " + getAbsenceColor(absences[i].JustificationState) +" ;'>" + absences[i].TypeName + " | " + absences[i].ModeName + " | " + absences[i].Subject + " (" + absences[i].JustificationStateName +")</p>");
                                            currentAbsence.appendTo("#tabDiv");
                                        }
                                    }
                                }
                            },
                            Notes: () => {
                                var notes = studentData.Notes;
                                for (i = 0; i < Object.keys(notes).length; i++) {
                                    $("<hr/>").appendTo("#tabDiv");
                                    var h3CurrentNoteTitle = $("<h3>" + notes[i].Title + "</h3>");
                                    h3CurrentNoteTitle.appendTo("#tabDiv");
                                    var pCurrentNoteContent = $("<p>" + notes[i].Content + "</p>");
                                    pCurrentNoteContent.appendTo("#tabDiv");
                                    var bCurrentNoteTeacher = $("<b> -" + notes[i].Teacher + "</b>");
                                    bCurrentNoteTeacher.appendTo("#tabDiv");
                                }
                            },
                            Export: () => {
                                var pExport =  $("<p>" +  locale["pExport"] + "</p>");
                                pExport.appendTo("#tabDiv");
                                var sExportType = $('<select id="sExportType"></select>');
                                sExportType.appendTo("#tabDiv");
                                var sExportTypeAvgEvals= $("<option value='avgEvals' selected>" + locale["current_avgs"] +"</option>");
                                sExportTypeAvgEvals.appendTo(sExportType);
                                var sExportTypeTimetable= $("<option value='timetable'>" + locale["timetable"] +"</option>");
                                sExportTypeTimetable.appendTo(sExportType);

                                var pToA =  $("<p>" + locale["pToA"] + "</p>");
                                pToA.appendTo("#tabDiv");
                                var sExportFormat = $('<select id="sExportFormat"/>');
                                sExportFormat.appendTo("#tabDiv");
                                var sExportFormatHTML = $("<option value='html'>HTML</option>");
                                sExportFormatHTML.appendTo(sExportFormat);
                                var pFile =  $("<p>" +  locale["pFile"] +"</p>");
                                pFile.appendTo("#tabDiv");

                                var bExport= $("<input type='button' onclick='exportToFile()' value='" + locale["export"] +"!' />");
                                bExport.appendTo("#tabDiv");
                            },
                            Settings: () => {
                                var languageSelected = new Array();
                                switch (settings["locale"]) {
                                    case "en": {
                                        languageSelected[0] = " selected ";
                                        languageSelected[1] = "";
                                        break;
                                    }
                                    case "hu": {
                                        languageSelected[0] = "";
                                        languageSelected[1] = " selected ";
                                        break;
                                    }
                                }

                                var pLocale = $("<p>" + locale["language"] + ": </p>");
                                pLocale.appendTo("#tabDiv");
                                var sLocale = $('<select id="sLocale"/>');
                                sLocale.appendTo("#tabDiv");
                                var sLocaleEn = $('<option value="en"' + languageSelected[0] + '>' + locale["en"] + '</option>');
                                sLocaleEn.appendTo("#sLocale");
                                var sLocaleHu = $('<option value="hu"' + languageSelected[1] + '>' + locale["hu"] + '</option>');
                                sLocaleHu.appendTo("#sLocale");

                                $("<br />").appendTo("#tabDiv");

                                var bSaveSettings = $("<input type='button' onclick='saveSettings()' value='" + locale["save_settings"] +"' />");
                                bSaveSettings.appendTo("#tabDiv");

                                var package = require("../package.json");
                                var pVersion = $("<br /><br /><p>Your version: " + package["version"] + "</p>");
                                pVersion.appendTo("#tabDiv");

                                var linkToIcons8 = $("<br /><a style='color: #555;' href='#' onclick='openExternalLink(\"https://icons8.com\")'>Icons by Icons8</a>");
                                linkToIcons8.appendTo("#tabDiv");
                            },
                        }
                        tabs[tab]();
                    }
                    displayNewTab(tab);
                }
            </script>
        </div>
    </body>
</html>